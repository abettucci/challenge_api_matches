name: Deploy to AWS Lambda

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: meli-challenge

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest test_app.py -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.0"
    
    - name: Terraform Init
      working-directory: ./terraform-simple
      run: terraform init
    
    - name: Create ECR Repository First
      working-directory: ./terraform-simple
      run: |
        terraform apply -auto-approve -target=aws_ecr_repository.lambda
    
    - name: Get ECR Repository URL
      working-directory: ./terraform-simple
      run: |
        echo "ECR_REPO_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-lambda
        IMAGE_TAG: latest
      run: |
        docker build -f Dockerfile.lambda -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Verify ECR Image
      run: |
        echo "Verifying image exists in ECR..."
        aws ecr describe-images \
          --repository-name ${{ env.PROJECT_NAME }}-lambda \
          --image-ids imageTag=latest \
          --region ${{ env.AWS_REGION }}
    
    - name: Terraform Plan
      working-directory: ./terraform-simple
      run: terraform plan -out=tfplan
    
    - name: Terraform Apply (Full Infrastructure)
      working-directory: ./terraform-simple
      run: terraform apply -auto-approve tfplan
    
    - name: Wait for Lambda update
      run: |
        aws lambda wait function-updated \
          --function-name ${{ env.PROJECT_NAME }}-api \
          --region ${{ env.AWS_REGION }}
    
    - name: Get API URL
      working-directory: ./terraform-simple
      run: |
        echo "API_URL=$(terraform output -raw api_url)" >> $GITHUB_ENV
        echo "HEALTH_URL=$(terraform output -raw health_url)" >> $GITHUB_ENV
    
    - name: Test API
      run: |
        echo "Testing API health endpoint..."
        sleep 30  # Wait for Lambda to be ready
        curl -f ${{ env.HEALTH_URL }}
    
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Deployment successful!**
            
            üåê **API URL**: ${{ env.API_URL }}
            ‚ù§Ô∏è **Health Check**: ${{ env.HEALTH_URL }}
            
            **Endpoints disponibles:**
            - \`GET /health\` - Health check
            - \`POST /items/compare\` - Comparar √≠tems
            - \`POST /items/pairs\` - Crear par de √≠tems
            - \`GET /items/pairs\` - Listar todos los pares
            - \`GET /items/pairs/{pair_id}\` - Obtener par espec√≠fico`
          })
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          üöÄ **API de √çtems Similares - Meli Challenge**
          
          **URLs:**
          - API: ${{ env.API_URL }}
          - Health: ${{ env.HEALTH_URL }}
          
          **Caracter√≠sticas:**
          - ‚úÖ Comparaci√≥n de √≠tems similares
          - ‚úÖ Prevenci√≥n de duplicados
          - ‚úÖ C√°lculo de similitud autom√°tico
          - ‚úÖ API RESTful en espa√±ol
          - ‚úÖ Desplegado en AWS Lambda + API Gateway
          - ‚úÖ Container image con Docker + ECR
        draft: false
        prerelease: false 