name: Deploy to AWS Lambda

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: meli-challenge

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Flask dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/app_flask/requirements.txt
    
    - name: Run Flask tests
      run: |
        cd src/app_flask
        pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.0"
    
    - name: Terraform Init
      working-directory: ./infrastructure/terraform-simple
      run: terraform init
    
    - name: Get ECR Repository URL
      working-directory: ./infrastructure/terraform-simple
      run: |
        # Construir la URL del repositorio ECR manualmente
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_REPO_URL="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-lambda"
        echo "ECR_REPO_URL=${ECR_REPO_URL}" >> $GITHUB_ENV
        echo "ECR Repository URL: ${ECR_REPO_URL}"
    
    - name: Ensure ECR Repository Exists
      run: |
        # Verificar si el repositorio ECR existe, crearlo si no
        if ! aws ecr describe-repositories --repository-names "${PROJECT_NAME}-lambda" --region ${AWS_REGION} > /dev/null 2>&1; then
          echo "Creating ECR repository ${PROJECT_NAME}-lambda..."
          aws ecr create-repository \
            --repository-name "${PROJECT_NAME}-lambda" \
            --image-scanning-configuration scanOnPush=true \
            --region ${AWS_REGION}
        else
          echo "ECR repository ${PROJECT_NAME}-lambda already exists"
        fi
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Create Dummy Image for Initial Deployment
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-lambda
      run: |
        echo "Creating dummy image for initial Lambda creation..."
        
        # Crear archivo lambda_function.py temporal
        cat > lambda_function_dummy.py << 'EOF'
        def lambda_handler(event, context):
            return {
                'statusCode': 200,
                'body': '{"message": "Dummy function - will be replaced"}'
            }
        EOF
        
        # Crear un Dockerfile temporal simple
        cat > Dockerfile.dummy << 'EOF'
        FROM public.ecr.aws/lambda/python:3.9
        COPY lambda_function_dummy.py /var/task/lambda_function.py
        CMD ["lambda_function.lambda_handler"]
        EOF
        
        # Construir y subir imagen dummy
        docker build -f Dockerfile.dummy -t $ECR_REGISTRY/$ECR_REPOSITORY:dummy .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:dummy
        
        # Taggear como latest también
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:dummy $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Limpiar archivos temporales
        rm -f Dockerfile.dummy lambda_function_dummy.py
    
    - name: Clean Up Existing Lambda Permissions
      run: |
        echo "Cleaning up existing Lambda permissions to avoid conflicts..."
        
        # List all permissions for the Lambda function
        PERMISSIONS=$(aws lambda get-policy --function-name meli-challenge-api --region ${AWS_REGION} --query 'Policy' --output text 2>/dev/null || echo "")
        
        if [ ! -z "$PERMISSIONS" ]; then
          echo "Found existing permissions, parsing and removing them..."
          
          # Extract statement IDs from the policy
          STATEMENT_IDS=$(echo "$PERMISSIONS" | jq -r '.Statement[].Sid' 2>/dev/null || echo "")
          
          for SID in $STATEMENT_IDS; do
            if [ ! -z "$SID" ]; then
              echo "Removing permission with statement ID: $SID"
              aws lambda remove-permission \
                --function-name meli-challenge-api \
                --statement-id "$SID" \
                --region ${AWS_REGION} || echo "Failed to remove permission $SID"
            fi
          done
        else
          echo "No existing permissions found or function doesn't exist yet"
        fi
    
    - name: Import Existing Resources to Terraform State
      working-directory: ./infrastructure/terraform-simple
      run: |
        echo "Importing existing AWS resources to Terraform state..."
        
        # Get AWS Account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "Using AWS Account ID: $ACCOUNT_ID"
        
        # Import DynamoDB table
        echo "Importing DynamoDB table..."
        terraform import aws_dynamodb_table.item_pairs item_pairs || echo "DynamoDB table already imported or doesn't exist"
        
        # Import ECR repository
        echo "Importing ECR repository..."
        terraform import aws_ecr_repository.lambda meli-challenge-lambda || echo "ECR repository already imported or doesn't exist"
        
        # Import IAM role
        echo "Importing IAM role..."
        terraform import aws_iam_role.lambda_role meli-challenge-lambda-role || echo "IAM role already imported or doesn't exist"
        
        # Import IAM policies
        echo "Importing IAM policies..."
        terraform import aws_iam_policy.lambda_logging arn:aws:iam::${ACCOUNT_ID}:policy/meli-challenge-lambda-logging || echo "IAM logging policy already imported or doesn't exist"
        terraform import aws_iam_policy.dynamodb_access arn:aws:iam::${ACCOUNT_ID}:policy/meli-challenge-dynamodb-access || echo "IAM DynamoDB policy already imported or doesn't exist"
        
        # Import Lambda function if it exists
        echo "Importing Lambda function..."
        terraform import aws_lambda_function.api meli-challenge-api || echo "Lambda function already imported or doesn't exist"
        
        echo "Import completed!"
    
    - name: Terraform Plan
      working-directory: ./infrastructure/terraform-simple
      run: terraform plan -out=tfplan
    
    - name: Terraform Apply (Full Infrastructure)
      working-directory: ./infrastructure/terraform-simple
      run: |
        # Aplicar Terraform con manejo de errores robusto
        terraform apply -auto-approve tfplan || {
          echo "Terraform apply failed, checking for specific errors..."
          
          # Capturar el output completo del error
          ERROR_OUTPUT=$(terraform apply -auto-approve tfplan 2>&1 || true)
          echo "Error output: $ERROR_OUTPUT"
          
          # Si falla por Lambda Permission conflict
          if echo "$ERROR_OUTPUT" | grep -q "ResourceConflictException.*AllowExecutionFromAPIGateway"; then
            echo "Lambda Permission conflict detected, removing existing permission..."
            aws lambda remove-permission \
              --function-name meli-challenge-api \
              --statement-id AllowExecutionFromAPIGateway \
              --region ${AWS_REGION} || echo "Permission removal failed or permission doesn't exist"
            
            echo "Retrying Terraform apply after permission removal..."
            terraform apply -auto-approve tfplan
          # Si falla por otros errores de permisos
          elif echo "$ERROR_OUTPUT" | grep -q "ResourceConflictException"; then
            echo "Other permission conflict detected, attempting to clean up..."
            # Intentar eliminar todos los permisos existentes
            aws lambda remove-permission \
              --function-name meli-challenge-api \
              --statement-id AllowExecutionFromAPIGateway \
              --region ${AWS_REGION} || echo "Permission removal failed"
            
            echo "Retrying Terraform apply..."
            terraform apply -auto-approve tfplan
          else
            echo "Unknown error, exiting..."
            echo "$ERROR_OUTPUT"
            exit 1
          fi
        }
    
    - name: Install ML Dependencies
      run: |
        echo "Installing ML dependencies..."
        pip install pandas xgboost joblib scikit-learn
    
    - name: Verify ML Dependencies
      run: |
        echo "Verifying ML dependencies..."
        python -c "import pandas, xgboost, joblib, sklearn; print('✅ All ML dependencies installed successfully')"
    
    - name: Prepare ML Model
      working-directory: ./src/ml
      run: |
        echo "Preparing ML model for deployment..."
        python prepare_ml_model.py
    
    - name: Copy ML module to Lambda folder
      run: cp src/ml/ml_similarity.py src/lambda/
    
    - name: Build and Push Real Application Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-lambda
        IMAGE_TAG: latest
      run: |
        echo "Building and pushing real application image..."
        cd src/lambda
        docker build -f Dockerfile.lambda -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "Real image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Update Lambda Function Code
      run: |
        echo "Updating Lambda function with real image..."
        aws lambda update-function-code \
          --function-name ${{ env.PROJECT_NAME }}-api \
          --image-uri ${{ env.ECR_REPO_URL }}:latest \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for Lambda update
      run: |
        aws lambda wait function-updated \
          --function-name ${{ env.PROJECT_NAME }}-api \
          --region ${{ env.AWS_REGION }}
    
    - name: Get API URL
      working-directory: ./infrastructure/terraform-simple
      run: |
        echo "API_URL=$(terraform output -raw api_url)" >> $GITHUB_ENV
        echo "HEALTH_URL=$(terraform output -raw health_url)" >> $GITHUB_ENV
    
    - name: Test API
      run: |
        echo "Testing API health endpoint..."
        sleep 30  # Wait for Lambda to be ready
        curl -f ${{ env.HEALTH_URL }}
    
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment successful!**
            
            🌐 **API URL**: ${{ env.API_URL }}
            ❤️ **Health Check**: ${{ env.HEALTH_URL }}
            
            **Endpoints disponibles:**
            - \`GET /health\` - Health check
            - \`POST /items/compare\` - Comparar ítems
            - \`POST /items/pairs\` - Crear par de ítems
            - \`GET /items/pairs\` - Listar todos los pares
            - \`GET /items/pairs/{pair_id}\` - Obtener par específico`
          })
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          🚀 **API de Ítems Similares - Meli Challenge**
          
          **URLs:**
          - API: ${{ env.API_URL }}
          - Health: ${{ env.HEALTH_URL }}
          
          **Características:**
          - ✅ Comparación de ítems similares
          - ✅ Prevención de duplicados
          - ✅ Cálculo de similitud automático
          - ✅ API RESTful en español
          - ✅ Desplegado en AWS Lambda + API Gateway
          - ✅ Container image con Docker + ECR
        draft: false
        prerelease: false 